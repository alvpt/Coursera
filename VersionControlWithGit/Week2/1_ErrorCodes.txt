/* Exercise 1:
Goal: Here we use users table to pull a list of user email addresses. Edit the query to pull email
addresses, but only for non-deleted users.*/
SELECT 
  id AS useer_id,
  email_address
FROM 
  dsv1069.users 
WHERE 
  deleted_at IS NULL


/*Exercise 2:
--Goal: Use the items table to count the number of items for sale in each category*/
SELECT
  category,
  COUNT(id) AS item_count
FROM 
  dsv1069.items 
GROUP BY 
  category
ORDER BY 
  item_count DESC


/*Exercise 3:
--Goal: Select all of the columns from the result when you JOIN the users table to the orders
table*/
SELECT 
  *
FROM 
  dsv1069.users
JOIN 
  dsv1069.orders
ON
  dsv1069.users.id = dsv1069.orders.user_id 
  
  
/*Exercise 4:
--Goal: Check out the query below.*/
SELECT 
  COUNT(DISTINCT event_name) AS events
FROM 
  dsv1069.events
WHERE 
  event_name = 'viewed_item' 


/*Exercise 5:
--Goal:Compute the number of items in the items table which have been ordered*/
SELECT 
  COUNT(DISTINCT id) AS item_count
FROM 
  dsv1069.items
JOIN 
  dsv1069.orders
ON items.id = orders.item_id 
    
    
/*Exercise 6:
--Goal: For each user figure out IF a user has ordered something, and when their first purchase
was.*/
SELECT 
  users.id AS users_id,
  MIN(orders.paid_at) AS min_paid_at
FROM 
  dsv1069.users
LEFT OUTER JOIN 
  dsv1069.orders
ON
  orders.user_id = users.id
GROUP BY 
  users.id
ORDER BY 
  users.id ASC


/*Exercise 7:
--Goal: Figure out what percent of users have ever viewed the user profile page, but this query
isnâ€™t right*/

SELECT 
(CASE WHEN first_view IS NULL THEN false
  ELSE true END) AS has_viewed_profile_page,
COUNT(user_id) as users
FROM  
  (SELECT 
    users.id AS user_id, 
    MIN(event_time) as first_view
  FROM
    dsv1069.users
  LEFT OUTER JOIN
    dsv1069.events
  ON
    events.user_id = users.id
  AND 
    event_name = 'view_user_profile'
  GROUP BY
    users.id
  ) first_profile_views
GROUP BY
  (CASE WHEN first_view IS NULL THEN false
  ELSE true END)
    
  
    



